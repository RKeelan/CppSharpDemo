// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------

#include "CppSharpJniRuntime.h"
#include "CppData.h"

extern "C" JNIEXPORT
void JNICALL Java_CppData_createInstanceJni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = new CppData();
    CppSharp::Runtime::setNativeInstance(env, obj, nativeInstance);
    CppSharp::Runtime::setOwnsNativeInstance(env, obj, JNI_TRUE);
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_destroyInstanceJni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    if (nativeInstance != nullptr) {
        delete nativeInstance;
        nativeInstance = nullptr;
    }

    CppSharp::Runtime::setNativeInstance(env, obj, nativeInstance);
    CppSharp::Runtime::setOwnsNativeInstance(env, obj, JNI_FALSE);
}

extern "C" JNIEXPORT
jboolean JNICALL Java_CppData_getBoolJni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetBool();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setBoolJni(JNIEnv *env, jobject obj, jboolean value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetBool(value);
}

extern "C" JNIEXPORT
int8_t JNICALL Java_CppData_getInt8Jni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetInt8();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setInt8Jni(JNIEnv *env, jobject obj, int8_t value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetInt8(value);
}

extern "C" JNIEXPORT
uint8_t JNICALL Java_CppData_getUint8Jni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetUint8();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setUint8Jni(JNIEnv *env, jobject obj, uint8_t value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetUint8(value);
}

extern "C" JNIEXPORT
int16_t JNICALL Java_CppData_getInt16Jni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetInt16();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setInt16Jni(JNIEnv *env, jobject obj, int16_t value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetInt16(value);
}

extern "C" JNIEXPORT
uint16_t JNICALL Java_CppData_getUint16Jni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetUint16();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setUint16Jni(JNIEnv *env, jobject obj, uint16_t value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetUint16(value);
}

extern "C" JNIEXPORT
int32_t JNICALL Java_CppData_getInt32Jni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetInt32();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setInt32Jni(JNIEnv *env, jobject obj, int32_t value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetInt32(value);
}

extern "C" JNIEXPORT
uint32_t JNICALL Java_CppData_getUint32Jni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetUint32();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setUint32Jni(JNIEnv *env, jobject obj, uint32_t value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetUint32(value);
}

extern "C" JNIEXPORT
int64_t JNICALL Java_CppData_getInt64Jni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetInt64();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setInt64Jni(JNIEnv *env, jobject obj, int64_t value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetInt64(value);
}

extern "C" JNIEXPORT
uint64_t JNICALL Java_CppData_getUint64Jni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetUint64();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setUint64Jni(JNIEnv *env, jobject obj, uint64_t value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetUint64(value);
}

extern "C" JNIEXPORT
jfloat JNICALL Java_CppData_getFloatJni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetFloat();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setFloatJni(JNIEnv *env, jobject obj, jfloat value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetFloat(value);
}

extern "C" JNIEXPORT
jdouble JNICALL Java_CppData_getDoubleJni(JNIEnv *env, jobject obj)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    return nativeInstance->GetDouble();
}

extern "C" JNIEXPORT
void JNICALL Java_CppData_setDoubleJni(JNIEnv *env, jobject obj, jdouble value)
{
    CppData* nativeInstance = CppSharp::Runtime::getNativeInstance<CppData>(env, obj);
    nativeInstance->SetDouble(value);
}
